/**\n * PitchDetector - Real-time pitch detection using Web Audio API\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PitchFinder from 'pitchfinder';\n\nconst PitchDetector = ({ isActive, onPitchDetected, audioFile }) => {\n  const [audioContext, setAudioContext] = useState(null);\n  const [analyser, setAnalyser] = useState(null);\n  const [microphone, setMicrophone] = useState(null);\n  const animationFrameRef = useRef();\n  const pitchDetector = useRef();\n\n  /**\n   * Note names for frequency conversion\n   */\n  const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n\n  /**\n   * Convert frequency to note name\n   */\n  const frequencyToNote = (frequency) => {\n    if (!frequency || frequency < 80) return null;\n    \n    const A4 = 440;\n    const C0 = A4 * Math.pow(2, -4.75);\n    \n    if (frequency > C0) {\n      const h = Math.round(12 * Math.log2(frequency / C0));\n      const octave = Math.floor(h / 12);\n      const n = h % 12;\n      return noteNames[n] + octave;\n    }\n    return null;\n  };\n\n  /**\n   * Initialize audio context and pitch detector\n   */\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      // Initialize pitch detector\n      pitchDetector.current = PitchFinder.YIN({ sampleRate: 44100 });\n    }\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n\n  /**\n   * Setup microphone when recording starts\n   */\n  useEffect(() => {\n    if (isActive && !audioContext) {\n      setupMicrophone();\n    } else if (!isActive && audioContext) {\n      cleanup();\n    }\n  }, [isActive]);\n\n  /**\n   * Setup microphone and audio analysis\n   */\n  const setupMicrophone = async () => {\n    try {\n      const context = new (window.AudioContext || window.webkitAudioContext)();\n      const analyserNode = context.createAnalyser();\n      \n      analyserNode.fftSize = 4096;\n      analyserNode.smoothingTimeConstant = 0.8;\n      \n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: false,\n          noiseSuppression: false,\n          autoGainControl: false\n        } \n      });\n      \n      const source = context.createMediaStreamSource(stream);\n      source.connect(analyserNode);\n      \n      setAudioContext(context);\n      setAnalyser(analyserNode);\n      setMicrophone(stream);\n      \n      startPitchDetection(analyserNode);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      onPitchDetected(null, 'Microphone access denied');\n    }\n  };\n\n  /**\n   * Start pitch detection loop\n   */\n  const startPitchDetection = (analyserNode) => {\n    const bufferLength = analyserNode.fftSize;\n    const dataArray = new Float32Array(bufferLength);\n    \n    const detectPitch = () => {\n      if (!isActive) return;\n      \n      analyserNode.getFloatTimeDomainData(dataArray);\n      \n      // Detect pitch using YIN algorithm\n      const pitch = pitchDetector.current(dataArray);\n      const note = frequencyToNote(pitch);\n      \n      onPitchDetected(pitch, note);\n      \n      animationFrameRef.current = requestAnimationFrame(detectPitch);\n    };\n    \n    detectPitch();\n  };\n\n  /**\n   * Cleanup audio resources\n   */\n  const cleanup = () => {\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    \n    if (microphone) {\n      microphone.getTracks().forEach(track => track.stop());\n    }\n    \n    if (audioContext) {\n      audioContext.close();\n    }\n    \n    setAudioContext(null);\n    setAnalyser(null);\n    setMicrophone(null);\n  };\n\n  return (\n    <div className=\"pitch-detector\">\n      {isActive ? (\n        <div className=\"recording-indicator\">\n          <div className=\"recording-dot\"></div>\n          <span>Listening for your voice...</span>\n        </div>\n      ) : (\n        <div className=\"inactive-message\">\n          Click \"Start Recording\" to begin pitch detection\n        </div>\n      )}\n      \n      <style jsx>{`\n        .pitch-detector {\n          padding: 20px;\n          text-align: center;\n        }\n        \n        .recording-indicator {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 10px;\n          color: #4CAF50;\n          font-weight: bold;\n        }\n        \n        .recording-dot {\n          width: 12px;\n          height: 12px;\n          background-color: #f44336;\n          border-radius: 50%;\n          animation: blink 1s infinite;\n        }\n        \n        @keyframes blink {\n          0%, 50% { opacity: 1; }\n          51%, 100% { opacity: 0.3; }\n        }\n        \n        .inactive-message {\n          color: #ccc;\n          font-style: italic;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default PitchDetector;