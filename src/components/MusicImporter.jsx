/**\n * MusicImporter - Handle audio file imports for practice\n */\n\nimport React, { useRef } from 'react';\n\nconst MusicImporter = ({ onAudioImport, audioFile }) => {\n  const fileInputRef = useRef();\n\n  /**\n   * Handle file selection\n   */\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      // Validate file type\n      if (file.type.startsWith('audio/')) {\n        onAudioImport(file);\n      } else {\n        alert('Please select a valid audio file (MP3, WAV, etc.)');\n      }\n    }\n  };\n\n  /**\n   * Open file dialog\n   */\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  /**\n   * Remove current file\n   */\n  const removeFile = () => {\n    onAudioImport(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  /**\n   * Format file size\n   */\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  /**\n   * Format duration\n   */\n  const formatDuration = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"music-importer\">\n      <div className=\"file-input-container\">\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"audio/*\"\n          onChange={handleFileChange}\n          id=\"audio-file-input\"\n        />\n        \n        {!audioFile ? (\n          <div>\n            <label htmlFor=\"audio-file-input\" className=\"file-input-label\">\n              \ud83c\udfb5 Choose Audio File\n            </label>\n            <p style={{ marginTop: '10px', color: '#ccc' }}>\n              Upload your backing track to practice with\n            </p>\n            <p style={{ fontSize: '0.9em', color: '#999' }}>\n              Supported formats: MP3, WAV, OGG, M4A\n            </p>\n          </div>\n        ) : (\n          <div className=\"current-file\">\n            <div>\n              <strong>\ud83c\udfb5 {audioFile.name}</strong>\n            </div>\n            <div style={{ margin: '10px 0', color: '#ccc' }}>\n              Size: {formatFileSize(audioFile.size)}\n            </div>\n            <div style={{ display: 'flex', gap: '10px', justifyContent: 'center' }}>\n              <button onClick={openFileDialog} style={{ padding: '5px 15px' }}>\n                \ud83d\udd04 Change File\n              </button>\n              <button \n                onClick={removeFile} \n                style={{ \n                  padding: '5px 15px', \n                  backgroundColor: '#f44336',\n                  border: 'none',\n                  color: 'white',\n                  borderRadius: '3px',\n                  cursor: 'pointer'\n                }}\n              >\n                \ud83d\uddd1\ufe0f Remove\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {audioFile && (\n        <div style={{ marginTop: '20px' }}>\n          <h3 style={{ marginBottom: '10px' }}>Audio Preview</h3>\n          <audio \n            controls \n            style={{ width: '100%', maxWidth: '500px' }}\n            preload=\"metadata\"\n          >\n            <source src={URL.createObjectURL(audioFile)} type={audioFile.type} />\n            Your browser does not support the audio element.\n          </audio>\n        </div>\n      )}\n      \n      <div style={{ marginTop: '15px', color: '#ccc', fontSize: '0.9em' }}>\n        \ud83d\udca1 <strong>Tip:</strong> Use backing tracks or instrumental versions of songs for best practice results\n      </div>\n    </div>\n  );\n};\n\nexport default MusicImporter;